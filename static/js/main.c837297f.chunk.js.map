{"version":3,"sources":["Gameboard.js","Options.js","Home.js","serviceWorker.js","index.js"],"names":["game","Chess","Gameboard","state","fen","history","gameEnd","whiteMove","blackMove","turn","onDrop","sourceSquare","targetSquare","piece","includes","move","from","to","promotion","setState","postContents","$","ajax","type","url","dataType","success","data","String","substring","length","game_over","error","jqXHR","errorThrown","alert","responseText","window","location","href","this","className","position","darkSquareStyle","backgroundColor","lightSquareStyle","orientation","onMoveEnd","width","onMouseOutSquare","onMouseOverSquare","onMouseoverSquare","React","Component","select1","Options","map","entry","index","trim","onClick","console","log","open","Home","params","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c837297f.chunk.js","sourcesContent":["/* global $ */\r\nimport React from 'react';\r\nimport Chess from 'chess.js';\r\nimport $ from 'jquery'\r\nimport './Gameboard.css';\r\nimport Chessboard from 'chessboardjsx';\r\nimport PropTypes from \"prop-types\";\r\n\r\nvar game = new Chess();\r\n\r\nclass Gameboard extends React.Component {\r\n  static propTypes = { children: PropTypes.func };\r\n\r\n  state = {\r\n    fen: \"start\",\r\n    history: [],\r\n    gameEnd: false,\r\n    whiteMove: \"\",\r\n    blackMove: \"\",\r\n    turn: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    var turn = \"\";\r\n\r\n    //Set the move for the player that went\r\n    if(window.location.href.includes(\"white\")){\r\n      //console.log(\"White goes first\")\r\n      turn = \"w\";\r\n    }\r\n    else{\r\n      //console.log(\"Black goes first\")\r\n      turn = \"b\";\r\n      $.ajax({\r\n        type: 'GET',   \r\n        url: 'http://chess-engine.azurewebsites.net/api/values?fen=' + game.fen(),\r\n        dataType: 'text',\r\n        success: \r\n        (data) => {\r\n\r\n          game.move({\r\n             to: String(data).substring(2,4),\r\n             from: String(data).substring(0,2),\r\n             promotion: (data.length === 5 ? String(data).substring(4) : \"q\")\r\n           });\r\n\r\n            this.setState({\r\n              fen: game.fen()\r\n            })\r\n\r\n           //console.log(\"New FEN: \"+ game.fen());\r\n           \r\n            this.setState({\r\n              whiteMove: String(data).substring(0,4)\r\n            })\r\n          \r\n        },\r\n        // error: fxnerrorptr\r\n        error: function (jqXHR, error, errorThrown) {\r\n          alert(jqXHR.responseText\r\n          +\"\\n\" + error\r\n          +\"\\n\" + errorThrown);\r\n        }\r\n      }); // always promote to a queen for example simplicity\r\n    }\r\n\r\n    this.setState({ \r\n      fen: game.fen(),\r\n      turn: turn\r\n     });\r\n  }\r\n\r\n  onDrop = ({ sourceSquare, targetSquare, piece }) => {\r\n    \r\n    var beforeFen = game.fen();\r\n\r\n    //console.log(piece);\r\n\r\n    if (!piece.includes(this.state.turn)) return;\r\n\r\n    // see if the move is legal\r\n    let move = game.move({\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: \"q\"\r\n    });\r\n    \r\n\r\n    // illegal move\r\n    if (move === null) return;\r\n\r\n    this.setState({\r\n      fen: game.fen(),\r\n    });\r\n\r\n    let postContents = \"\" + sourceSquare + targetSquare;\r\n    var state = this;\r\n\r\n    if(this.state.turn === \"w\"){\r\n      this.setState({\r\n        whiteMove: postContents\r\n      })\r\n    }\r\n    else{\r\n      this.setState({\r\n        blackMove: postContents\r\n      })\r\n    }\r\n\r\n      $.ajax({\r\n        type: 'GET',   \r\n        url: 'http://chess-engine.azurewebsites.net/api/values?fen=' + game.fen(),\r\n        dataType: 'text',\r\n        success: \r\n        (data) => {\r\n\r\n          //console.log(\"FEN Passed to API: \"+ 'http://chess-engine.azurewebsites.net/api/values?fen=' + game.fen());\r\n\r\n          game.move({\r\n             to: String(data).substring(2,4),\r\n             from: String(data).substring(0,2),\r\n             promotion: (data.length === 5 ? String(data).substring(4) : \"q\")\r\n           });\r\n\r\n            state.setState({\r\n              fen: game.fen()\r\n            })\r\n\r\n           //console.log(\"New FEN: \"+ game.fen());\r\n           if(state.state.turn === \"b\"){\r\n            state.setState({\r\n              whiteMove: String(data).substring(0,4)\r\n            })\r\n          }\r\n          else{\r\n            state.setState({\r\n              blackMove: String(data).substring(0,4)\r\n            })\r\n          }\r\n\r\n           if(game.game_over()){\r\n            //console.log(\"GAME OVER\");\r\n            state.setState({\r\n              gameEnd: true\r\n            });\r\n          }\r\n        },\r\n        // error: fxnerrorptr\r\n        error: function (jqXHR, error, errorThrown) {\r\n          alert(jqXHR.responseText\r\n          +\"\\n\" + error\r\n          +\"\\n\" + errorThrown);\r\n        }\r\n      }); // always promote to a queen for example simplicity\r\n\r\n    this.setState({\r\n      fen: game.fen(),\r\n    });\r\n  }\r\n\r\n  onMoveEnd(){\r\n    if(game.game_over()){\r\n      //console.log(\"GAME OVER\");\r\n      this.state.setState({\r\n        gameEnd: true\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"gameboard-layout\">\r\n\r\n        <div className=\"gameboard-box\">\r\n\r\n          <Chessboard\r\n            position={this.state.fen}\r\n            darkSquareStyle={{ backgroundColor: '#B0C4DE' }}\r\n            lightSquareStyle={{ backgroundColor: 'white' }}\r\n            orientation={(this.state.turn === 'b' ? 'black' : 'white')}\r\n            onDrop={this.onDrop}\r\n            onMoveEnd={this.onMoveEnd}\r\n            width=\"640\"\r\n            onMouseOutSquare={this.onMouseOverSquare}\r\n            onMouseoverSquare={this.onMouseoverSquare}\r\n            \r\n          />\r\n\r\n          <div className=\"moves\">\r\n\r\n            <div className=\"black\">\r\n                <h1>Black's Move</h1>\r\n                <h2>{this.state.blackMove}</h2>\r\n            </div>\r\n\r\n            <div className=\"white\">\r\n                <h1>White's Move</h1>\r\n                <h2>{this.state.whiteMove}</h2>\r\n            </div>\r\n\r\n          </div>\r\n        \r\n        </div>\r\n\r\n        {this.state.gameEnd ?\r\n          <div>\r\n              <h1>Game Over</h1>\r\n          </div>:null}\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Gameboard;","import React from 'react';\r\nimport './Options.css';\r\n\r\nvar select1 = ['Play As White', 'Play As Black'];\r\nvar select2 = ['option 4', 'option 5', 'option 6'];\r\n\r\nclass Options extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Options-layout\">\r\n\r\n                <div className=\"welcome-box\">\r\n                    <span className=\"welcome-header\">\r\n                        Bingus Inc. Chess Engine\r\n          </span>\r\n                </div>\r\n\r\n                <div className=\"select-box\">\r\n                    <span className=\"select-header\">\r\n                        Select Color\r\n          </span>\r\n                </div>\r\n\r\n                <div className=\"difficulty-box\">\r\n\r\n                    <ul className=\"difficulty-list1\">\r\n\r\n                        {select1.map((entry, index) => {\r\n                            return (\r\n                                <li className=\"difficulty-entry\">\r\n\r\n                                    <button className=\"difficulty-name\"\r\n                                        entry={entry.trim()}\r\n                                        onClick={() => {\r\n                                            var url = \"/play/\" + (index === 1 ? \"white/\" : \"black/\");\r\n                                            console.log(index);\r\n                                            window.open(url, \"_self\")\r\n                                        }}\r\n                                        index={index++}\r\n                                    >\r\n\r\n                                        <span>{entry}</span>\r\n\r\n                                    </button>\r\n\r\n                                </li>\r\n                            )\r\n                        })}\r\n\r\n                    </ul>\r\n\r\n                    {/* <ul className=\"difficulty-list2\">\r\n\r\n                        {select2.map((entry, index) => {\r\n                            return (\r\n                                <li className=\"difficulty-entry\">\r\n\r\n                                    <button className=\"difficulty-name\"\r\n                                        entry={entry.trim()}\r\n                                        index={index++}\r\n                                        onClick={() => {\r\n                                            var url = \"/play/option\" + (index+3);\r\n                                            console.log(index);\r\n                                            window.open(url, \"_self\")\r\n                                        }}\r\n                                    >\r\n\r\n                                        <span>{entry}</span>\r\n\r\n                                    </button>\r\n\r\n                                </li>\r\n                            )\r\n                        })}\r\n\r\n                    </ul> */}\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Options;\r\n","import React from 'react';\r\nimport './Home.css';\r\nimport Gameboard from './Gameboard';\r\nimport Particles from 'react-particles-js';\r\nimport Options from './Options';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\n\r\nclass Home extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"home-layout\">\r\n\r\n        <div className=\"background\">\r\n          <Particles\r\n            params={{\r\n              \"particles\": {\r\n                \"number\": {\r\n                  \"value\": 50,\r\n                },\r\n                \"color\": {\r\n                  \"value\": \"FFFFF0\"\r\n                },\r\n                \"line_linked\": {\r\n                  \"enable\": true,\r\n                },\r\n                \"size\": {\r\n                  \"value\": 4,\r\n                }\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n\r\n      <Switch>\r\n            <Route exact path=\"/\"  component={Options} />\r\n            <Route path=\"/play\" component={Gameboard} />\r\n            <Redirect to=\"/\" />\r\n      </Switch>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Home from './Home';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Home />\r\n    </BrowserRouter>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}