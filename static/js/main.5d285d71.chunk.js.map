{"version":3,"sources":["Gameboard.js","Options.js","Home.js","serviceWorker.js","index.js"],"names":["game","Chess","Gameboard","state","fen","history","gameEnd","whiteMove","blackMove","turn","onDrop","_ref","sourceSquare","targetSquare","piece","includes","_this","move","from","to","promotion","setState","postContents","Object","assertThisInitialized","$","ajax","type","url","dataType","success","data","String","substring","length","game_over","error","jqXHR","errorThrown","alert","responseText","_this2","this","window","location","href","react_default","a","createElement","className","chessboard_min_default","position","darkSquareStyle","backgroundColor","lightSquareStyle","orientation","onMoveEnd","width","onMouseOutSquare","onMouseOverSquare","onMouseoverSquare","React","Component","select1","Options","map","entry","index","trim","onClick","open","Home","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","react_router_dom","basename","src_Home_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d285d71.chunk.js","sourcesContent":["/* global $ */\nimport React from 'react';\nimport Chess from 'chess.js';\nimport $ from 'jquery'\nimport './Gameboard.css';\nimport Chessboard from 'chessboardjsx';\nimport PropTypes from \"prop-types\";\n\nvar game = new Chess();\n\nclass Gameboard extends React.Component {\n  static propTypes = { children: PropTypes.func };\n\n  state = {\n    fen: \"start\",\n    history: [],\n    gameEnd: false,\n    whiteMove: \"\",\n    blackMove: \"\",\n    turn: \"\"\n  };\n\n  componentDidMount() {\n    var turn = \"\";\n\n    //Set the move for the player that went\n    if(window.location.href.includes(\"white\")){\n      //console.log(\"White goes first\")\n      turn = \"w\";\n    }\n    else{\n      //console.log(\"Black goes first\")\n      turn = \"b\";\n      $.ajax({\n        type: 'GET',   \n        url: 'https://chess-engine.azurewebsites.net/api/values?fen=' + game.fen(),\n        dataType: 'text',\n        success: \n        (data) => {\n\n          game.move({\n             to: String(data).substring(2,4),\n             from: String(data).substring(0,2),\n             promotion: (data.length === 5 ? String(data).substring(4) : \"q\")\n           });\n\n            this.setState({\n              fen: game.fen()\n            })\n\n           //console.log(\"New FEN: \"+ game.fen());\n           \n            this.setState({\n              whiteMove: String(data).substring(0,4)\n            })\n          \n        },\n        // error: fxnerrorptr\n        error: function (jqXHR, error, errorThrown) {\n          alert(jqXHR.responseText\n          +\"\\n\" + error\n          +\"\\n\" + errorThrown);\n        }\n      }); // always promote to a queen for example simplicity\n    }\n\n    this.setState({ \n      fen: game.fen(),\n      turn: turn\n     });\n  }\n\n  onDrop = ({ sourceSquare, targetSquare, piece }) => {\n    \n    var beforeFen = game.fen();\n\n    //console.log(piece);\n\n    if (!piece.includes(this.state.turn)) return;\n\n    // see if the move is legal\n    let move = game.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: \"q\"\n    });\n    \n\n    // illegal move\n    if (move === null) return;\n\n    this.setState({\n      fen: game.fen(),\n    });\n\n    let postContents = \"\" + sourceSquare + targetSquare;\n    var state = this;\n\n    if(this.state.turn === \"w\"){\n      this.setState({\n        whiteMove: postContents\n      })\n    }\n    else{\n      this.setState({\n        blackMove: postContents\n      })\n    }\n\n      $.ajax({\n        type: 'GET',   \n        url: 'https://chess-engine.azurewebsites.net/api/values?fen=' + game.fen(),\n        dataType: 'text',\n        success: \n        (data) => {\n\n          //console.log(\"FEN Passed to API: \"+ 'http://chess-engine.azurewebsites.net/api/values?fen=' + game.fen());\n\n          game.move({\n             to: String(data).substring(2,4),\n             from: String(data).substring(0,2),\n             promotion: (data.length === 5 ? String(data).substring(4) : \"q\")\n           });\n\n            state.setState({\n              fen: game.fen()\n            })\n\n           //console.log(\"New FEN: \"+ game.fen());\n           if(state.state.turn === \"b\"){\n            state.setState({\n              whiteMove: String(data).substring(0,4)\n            })\n          }\n          else{\n            state.setState({\n              blackMove: String(data).substring(0,4)\n            })\n          }\n\n           if(game.game_over()){\n            //console.log(\"GAME OVER\");\n            state.setState({\n              gameEnd: true\n            });\n          }\n        },\n        // error: fxnerrorptr\n        error: function (jqXHR, error, errorThrown) {\n          alert(jqXHR.responseText\n          +\"\\n\" + error\n          +\"\\n\" + errorThrown);\n        }\n      }); // always promote to a queen for example simplicity\n\n    this.setState({\n      fen: game.fen(),\n    });\n  }\n\n  onMoveEnd(){\n    if(game.game_over()){\n      //console.log(\"GAME OVER\");\n      this.state.setState({\n        gameEnd: true\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"gameboard-layout\">\n\n        <div className=\"gameboard-box\">\n\n          <Chessboard\n            position={this.state.fen}\n            darkSquareStyle={{ backgroundColor: '#B0C4DE' }}\n            lightSquareStyle={{ backgroundColor: 'white' }}\n            orientation={(this.state.turn === 'b' ? 'black' : 'white')}\n            onDrop={this.onDrop}\n            onMoveEnd={this.onMoveEnd}\n            width=\"640\"\n            onMouseOutSquare={this.onMouseOverSquare}\n            onMouseoverSquare={this.onMouseoverSquare}\n            \n          />\n\n          <div className=\"moves\">\n\n            <div className=\"black\">\n                <h1>Black's Move</h1>\n                <h2>{this.state.blackMove}</h2>\n            </div>\n\n            <div className=\"white\">\n                <h1>White's Move</h1>\n                <h2>{this.state.whiteMove}</h2>\n            </div>\n\n          </div>\n        \n        </div>\n\n        {this.state.gameEnd ?\n          <div>\n              <h1>Game Over</h1>\n          </div>:null}\n\n      </div>\n\n    );\n  }\n}\n\nexport default Gameboard;","import React from 'react';\nimport './Options.css';\n\nvar select1 = ['Play As White', 'Play As Black'];\nvar select2 = ['option 4', 'option 5', 'option 6'];\n\nclass Options extends React.Component {\n    render() {\n        return (\n            <div className=\"Options-layout\">\n\n                <div className=\"welcome-box\">\n                    <span className=\"welcome-header\">\n                        Bingus Inc. Chess Engine\n          </span>\n                </div>\n\n                <div className=\"select-box\">\n                    <span className=\"select-header\">\n                        Select Color\n          </span>\n                </div>\n\n                <div className=\"difficulty-box\">\n\n                    <ul className=\"difficulty-list1\">\n\n                        {select1.map((entry, index) => {\n                            return (\n                                <li className=\"difficulty-entry\">\n\n                                    <button className=\"difficulty-name\"\n                                        entry={entry.trim()}\n                                        onClick={() => {\n                                            var url = \"/play/\" + (index === 1 ? \"white/\" : \"black/\");\n                                            // console.log(index);\n                                            window.open(url, \"_self\")\n                                        }}\n                                        index={index++}\n                                    >\n\n                                        <span>{entry}</span>\n\n                                    </button>\n\n                                </li>\n                            )\n                        })}\n\n                    </ul>\n\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Options;\n","import React from 'react';\r\nimport './Home.css';\r\nimport Gameboard from './Gameboard';\r\n// import Particles from 'react-particles-js';\r\nimport Options from './Options';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\n\r\nclass Home extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"home-layout\">\r\n\r\n        <div className=\"background\">\r\n          {/* <Particles\r\n            params={{\r\n              \"particles\": {\r\n                \"number\": {\r\n                  \"value\": 50,\r\n                },\r\n                \"color\": {\r\n                  \"value\": \"FFFFF0\"\r\n                },\r\n                \"line_linked\": {\r\n                  \"enable\": true,\r\n                },\r\n                \"size\": {\r\n                  \"value\": 4,\r\n                }\r\n              }\r\n            }}\r\n          /> */}\r\n        </div>\r\n\r\n      <Switch>\r\n\r\n            <Route exact path=\"/\" component={Options} />\r\n\r\n            <Route path=\"/play\" component={Gameboard}/>\r\n\r\n            {/* <Redirect to=\"/ChessEngine\" /> */}\r\n\r\n      </Switch>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './Home';\n\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter basename=\"https://arnoldmak12.github.io/FrontEnd-ChessEngine\">\n        <Home />\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}